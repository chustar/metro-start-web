using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

using System.Data.SqlClient;
using System.Net.Http;
using MetroStart.QuickType;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Table;

namespace MetroStart
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var welcome = Welcome.FromJson(jsonString);

    namespace QuickType
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class OpenWeatherResponse
        {
            [JsonProperty("coord")]
            public Coord Coord { get; set; }

            [JsonProperty("weather")]
            public Weather[] Weather { get; set; }

            [JsonProperty("base")]
            public string Base { get; set; }

            [JsonProperty("main")]
            public Main Main { get; set; }

            [JsonProperty("visibility")]
            public long Visibility { get; set; }

            [JsonProperty("wind")]
            public Wind Wind { get; set; }

            [JsonProperty("clouds")]
            public Clouds Clouds { get; set; }

            [JsonProperty("dt")]
            public long Dt { get; set; }

            [JsonProperty("sys")]
            public Sys Sys { get; set; }

            [JsonProperty("id")]
            public long Id { get; set; }

            [JsonProperty("name")]
            public string Name { get; set; }

            [JsonProperty("cod")]
            public long Cod { get; set; }
        }

        public partial class Clouds
        {
            [JsonProperty("all")]
            public long All { get; set; }
        }

        public partial class Coord
        {
            [JsonProperty("lon")]
            public double Lon { get; set; }

            [JsonProperty("lat")]
            public double Lat { get; set; }
        }

        public partial class Main
        {
            [JsonProperty("temp")]
            public double Temp { get; set; }

            [JsonProperty("pressure")]
            public long Pressure { get; set; }

            [JsonProperty("humidity")]
            public long Humidity { get; set; }

            [JsonProperty("temp_min")]
            public double TempMin { get; set; }

            [JsonProperty("temp_max")]
            public double TempMax { get; set; }
        }

        public partial class Sys
        {
            [JsonProperty("type")]
            public long Type { get; set; }

            [JsonProperty("id")]
            public long Id { get; set; }

            [JsonProperty("message")]
            public double Message { get; set; }

            [JsonProperty("country")]
            public string Country { get; set; }

            [JsonProperty("sunrise")]
            public long Sunrise { get; set; }

            [JsonProperty("sunset")]
            public long Sunset { get; set; }
        }

        public partial class Weather
        {
            [JsonProperty("id")]
            public long Id { get; set; }

            [JsonProperty("main")]
            public string Main { get; set; }

            [JsonProperty("description")]
            public string Description { get; set; }

            [JsonProperty("icon")]
            public string Icon { get; set; }
        }

        public partial class Wind
        {
            [JsonProperty("speed")]
            public long Speed { get; set; }

            [JsonProperty("deg")]
            public long Deg { get; set; }
        }

        public partial class OpenWeatherResponse
        {
            public static OpenWeatherResponse FromJson(string json) => JsonConvert.DeserializeObject<OpenWeatherResponse>(json, QuickType.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this OpenWeatherResponse self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }

    public static class GetWeather
    {
        public static string ConnectionString = "DefaultEndpointsProtocol=https;AccountName=metrostart;AccountKey=Ie07ugjeGdDN8iydC0//pb3EQN9nvZTLhgyM1pxj0V5xdszAekIdVAjIZ77IkVKJILlVLTMYuBd68ErbfHs8hQ==;EndpointSuffix=core.windows.net";
        public static string API_KEY { get; set; } = "28b17e7c3c31712eae1440f959cff7e1";

        [FunctionName("weather")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
            ILogger log)
        {
            log.LogInformation("C# HTTP trigger function processed a request.");

            string location = req.Query["location"];
            NullCheck(location, nameof(location));

            string units = req.Query["units"];
            NullCheck(units, nameof(units));

            var weatherUrl = $"https://api.openweathermap.org/data/2.5/weather?q={location}&units={units}";

            try
            {
                if (await GetCached(location, units) is WeatherEntity weather)
                {
                    return new OkObjectResult(weather.WeatherResponse);
                }
                else
                {
                    var httpClient = new HttpClient();
                    var response = await httpClient.GetAsync($"{weatherUrl}&APPID={API_KEY}");
                    response.EnsureSuccessStatusCode();
                    var responseText = await response.Content.ReadAsStringAsync();
                    var weatherResponse = OpenWeatherResponse.FromJson(responseText);
                    NullCheck(weatherResponse, nameof(weatherResponse));

                    await CacheIt(location, units, weatherResponse);
                    return new OkObjectResult(weatherResponse);
                }
            }
            catch (Exception e)
            {
                return new BadRequestObjectResult($"Failed to fetch '{weatherUrl}':{Environment.NewLine}{e}");
            }
        }

        private static async Task<WeatherEntity> GetCached(string location, string units)
        {
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(ConnectionString);
            CloudTableClient tableClient = storageAccount.CreateCloudTableClient();
            CloudTable table = tableClient.GetTableReference("weather");

            if (await table.ExistsAsync())
            {
                TableOperation retrieveOperation = TableOperation.Retrieve<WeatherEntity>(location, units);
                TableResult retrievedResult = await table.ExecuteAsync(retrieveOperation);

                // Print the phone number of the result.
                if (retrievedResult.Result is WeatherEntity weatherEntity)
                {
                    if (weatherEntity.CreationDate >= DateTime.Now.AddHours(-1))
                    {
                        return weatherEntity;
                    }
                    else
                    {
                        TableOperation.Delete(weatherEntity);
                    }
                }

            }

            return null;
        }

        private static async Task CacheIt(string location, string units, OpenWeatherResponse weather)
        {
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(ConnectionString);
            CloudTableClient tableClient = storageAccount.CreateCloudTableClient();
            CloudTable table = tableClient.GetTableReference("weather");

            // Create the table if it doesn't exist.
            await table.CreateIfNotExistsAsync();

            var weatherEntity = new WeatherEntity(location, units, DateTime.Now, weather);
            TableOperation insertOperation = TableOperation.Insert(weatherEntity);

            // Execute the insert operation.
            await table.ExecuteAsync(insertOperation);
        }

        private static void NullCheck(object obj, string name)
        {
            if (obj == null)
            {
                throw new ArgumentNullException(name);
            }
        }
    }

    public class WeatherEntity : TableEntity
    {
        public WeatherEntity(string location, string units, DateTime creationDate, OpenWeatherResponse weatherResponse)
        {
            PartitionKey = units;
            RowKey = location;

            Location = location;
            Units = units;
            CreationDate = creationDate;
            WeatherResponse = weatherResponse;
        }

        public WeatherEntity()
        {
        }

        public string Location { get; set; }
        public string Units { get; set; }
        public DateTime CreationDate { get; set; }
        public OpenWeatherResponse WeatherResponse { get; set; }
    }
}
